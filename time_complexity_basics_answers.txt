Exercises

1. What is time complexity and what is its relation to algorithms?

A: Time complexity is a mathmatical function used to estimate how long it will take to run an algorithm. Based on the worst care scenario it calculates the number of times a statment will execute.

2. What is runtime?

A: Runtime is the actual time it takes to run a particular piece of code.

3. How is the runtime of an algorithm calculated?

A: Examining the number of operations required based on an infinitley large data set. Runtime refers to the limitation of the scenario in particular.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A: 
1) O(1) - constanst growth rate
2) O(log n) - logarithmic growth rate
3) O(n) - linear growth rate
4) O(n log n) - log-linear growth rate
5) O(n^2) - quadratic growth rate
6) O(n^3) - cubic growth rate
7) O(2^n) - exponential growth rate

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: logarithmic growth rate O(log n) - Bodybuilding: One often sees results quickly and effectively at first, however this increment decreases and requires greater effort as you progess towards higher goals over time. 

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n)

7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

A: O(n) - linear growth rate